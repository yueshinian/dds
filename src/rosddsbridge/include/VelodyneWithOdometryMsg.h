// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VelodyneWithOdometryMsg.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _VELODYNEWITHODOMETRYMSG_H_
#define _VELODYNEWITHODOMETRYMSG_H_

#include "PclMsg.h"
#include "OdometryMsg.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(VelodyneWithOdometryMsg_SOURCE)
#define VelodyneWithOdometryMsg_DllAPI __declspec( dllexport )
#else
#define VelodyneWithOdometryMsg_DllAPI __declspec( dllimport )
#endif // VelodyneWithOdometryMsg_SOURCE
#else
#define VelodyneWithOdometryMsg_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define VelodyneWithOdometryMsg_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure VelodyneWithOdometryMsg defined by the user in the IDL file.
 * @ingroup VELODYNEWITHODOMETRYMSG
 */
class VelodyneWithOdometryMsg
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport VelodyneWithOdometryMsg();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~VelodyneWithOdometryMsg();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VelodyneWithOdometryMsg that will be copied.
     */
    eProsima_user_DllExport VelodyneWithOdometryMsg(
            const VelodyneWithOdometryMsg& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VelodyneWithOdometryMsg that will be copied.
     */
    eProsima_user_DllExport VelodyneWithOdometryMsg(
            VelodyneWithOdometryMsg&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VelodyneWithOdometryMsg that will be copied.
     */
    eProsima_user_DllExport VelodyneWithOdometryMsg& operator =(
            const VelodyneWithOdometryMsg& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object VelodyneWithOdometryMsg that will be copied.
     */
    eProsima_user_DllExport VelodyneWithOdometryMsg& operator =(
            VelodyneWithOdometryMsg&& x);

    /*!
     * @brief This function copies the value in member odometry
     * @param _odometry New value to be copied in member odometry
     */
    eProsima_user_DllExport void odometry(
            const OdometryMsg& _odometry);

    /*!
     * @brief This function moves the value in member odometry
     * @param _odometry New value to be moved in member odometry
     */
    eProsima_user_DllExport void odometry(
            OdometryMsg&& _odometry);

    /*!
     * @brief This function returns a constant reference to member odometry
     * @return Constant reference to member odometry
     */
    eProsima_user_DllExport const OdometryMsg& odometry() const;

    /*!
     * @brief This function returns a reference to member odometry
     * @return Reference to member odometry
     */
    eProsima_user_DllExport OdometryMsg& odometry();
    /*!
     * @brief This function copies the value in member pcl
     * @param _pcl New value to be copied in member pcl
     */
    eProsima_user_DllExport void pcl(
            const PclMsg& _pcl);

    /*!
     * @brief This function moves the value in member pcl
     * @param _pcl New value to be moved in member pcl
     */
    eProsima_user_DllExport void pcl(
            PclMsg&& _pcl);

    /*!
     * @brief This function returns a constant reference to member pcl
     * @return Constant reference to member pcl
     */
    eProsima_user_DllExport const PclMsg& pcl() const;

    /*!
     * @brief This function returns a reference to member pcl
     * @return Reference to member pcl
     */
    eProsima_user_DllExport PclMsg& pcl();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const VelodyneWithOdometryMsg& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    OdometryMsg m_odometry;
    PclMsg m_pcl;
};

#endif // _VELODYNEWITHODOMETRYMSG_H_