// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MeasureMsg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MeasureMsg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

MeasureMsg::MeasureMsg()
{
    // m_minX com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4671e53b
    m_minX = 0.0;
    // m_minY com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2db7a79b
    m_minY = 0.0;
    // m_minZ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6950e31
    m_minZ = 0.0;
    // m_maxX com.eprosima.idl.parser.typecode.PrimitiveTypeCode@b7dd107
    m_maxX = 0.0;
    // m_maxY com.eprosima.idl.parser.typecode.PrimitiveTypeCode@42eca56e
    m_maxY = 0.0;
    // m_maxZ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@52f759d7
    m_maxZ = 0.0;

}

MeasureMsg::~MeasureMsg()
{






}

MeasureMsg::MeasureMsg(
        const MeasureMsg& x)
{
    m_minX = x.m_minX;
    m_minY = x.m_minY;
    m_minZ = x.m_minZ;
    m_maxX = x.m_maxX;
    m_maxY = x.m_maxY;
    m_maxZ = x.m_maxZ;
}

MeasureMsg::MeasureMsg(
        MeasureMsg&& x)
{
    m_minX = x.m_minX;
    m_minY = x.m_minY;
    m_minZ = x.m_minZ;
    m_maxX = x.m_maxX;
    m_maxY = x.m_maxY;
    m_maxZ = x.m_maxZ;
}

MeasureMsg& MeasureMsg::operator =(
        const MeasureMsg& x)
{

    m_minX = x.m_minX;
    m_minY = x.m_minY;
    m_minZ = x.m_minZ;
    m_maxX = x.m_maxX;
    m_maxY = x.m_maxY;
    m_maxZ = x.m_maxZ;

    return *this;
}

MeasureMsg& MeasureMsg::operator =(
        MeasureMsg&& x)
{

    m_minX = x.m_minX;
    m_minY = x.m_minY;
    m_minZ = x.m_minZ;
    m_maxX = x.m_maxX;
    m_maxY = x.m_maxY;
    m_maxZ = x.m_maxZ;

    return *this;
}

size_t MeasureMsg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t MeasureMsg::getCdrSerializedSize(
        const MeasureMsg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void MeasureMsg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_minX;
    scdr << m_minY;
    scdr << m_minZ;
    scdr << m_maxX;
    scdr << m_maxY;
    scdr << m_maxZ;

}

void MeasureMsg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_minX;
    dcdr >> m_minY;
    dcdr >> m_minZ;
    dcdr >> m_maxX;
    dcdr >> m_maxY;
    dcdr >> m_maxZ;
}

/*!
 * @brief This function sets a value in member minX
 * @param _minX New value for member minX
 */
void MeasureMsg::minX(
        float _minX)
{
    m_minX = _minX;
}

/*!
 * @brief This function returns the value of member minX
 * @return Value of member minX
 */
float MeasureMsg::minX() const
{
    return m_minX;
}

/*!
 * @brief This function returns a reference to member minX
 * @return Reference to member minX
 */
float& MeasureMsg::minX()
{
    return m_minX;
}

/*!
 * @brief This function sets a value in member minY
 * @param _minY New value for member minY
 */
void MeasureMsg::minY(
        float _minY)
{
    m_minY = _minY;
}

/*!
 * @brief This function returns the value of member minY
 * @return Value of member minY
 */
float MeasureMsg::minY() const
{
    return m_minY;
}

/*!
 * @brief This function returns a reference to member minY
 * @return Reference to member minY
 */
float& MeasureMsg::minY()
{
    return m_minY;
}

/*!
 * @brief This function sets a value in member minZ
 * @param _minZ New value for member minZ
 */
void MeasureMsg::minZ(
        float _minZ)
{
    m_minZ = _minZ;
}

/*!
 * @brief This function returns the value of member minZ
 * @return Value of member minZ
 */
float MeasureMsg::minZ() const
{
    return m_minZ;
}

/*!
 * @brief This function returns a reference to member minZ
 * @return Reference to member minZ
 */
float& MeasureMsg::minZ()
{
    return m_minZ;
}

/*!
 * @brief This function sets a value in member maxX
 * @param _maxX New value for member maxX
 */
void MeasureMsg::maxX(
        float _maxX)
{
    m_maxX = _maxX;
}

/*!
 * @brief This function returns the value of member maxX
 * @return Value of member maxX
 */
float MeasureMsg::maxX() const
{
    return m_maxX;
}

/*!
 * @brief This function returns a reference to member maxX
 * @return Reference to member maxX
 */
float& MeasureMsg::maxX()
{
    return m_maxX;
}

/*!
 * @brief This function sets a value in member maxY
 * @param _maxY New value for member maxY
 */
void MeasureMsg::maxY(
        float _maxY)
{
    m_maxY = _maxY;
}

/*!
 * @brief This function returns the value of member maxY
 * @return Value of member maxY
 */
float MeasureMsg::maxY() const
{
    return m_maxY;
}

/*!
 * @brief This function returns a reference to member maxY
 * @return Reference to member maxY
 */
float& MeasureMsg::maxY()
{
    return m_maxY;
}

/*!
 * @brief This function sets a value in member maxZ
 * @param _maxZ New value for member maxZ
 */
void MeasureMsg::maxZ(
        float _maxZ)
{
    m_maxZ = _maxZ;
}

/*!
 * @brief This function returns the value of member maxZ
 * @return Value of member maxZ
 */
float MeasureMsg::maxZ() const
{
    return m_maxZ;
}

/*!
 * @brief This function returns a reference to member maxZ
 * @return Reference to member maxZ
 */
float& MeasureMsg::maxZ()
{
    return m_maxZ;
}


size_t MeasureMsg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;









    return current_align;
}

bool MeasureMsg::isKeyDefined()
{
    return false;
}

void MeasureMsg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
          
}
