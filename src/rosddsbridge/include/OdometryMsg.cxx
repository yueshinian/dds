// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file OdometryMsg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "OdometryMsg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

OdometryMsg::OdometryMsg()
{
    // m_seq com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4e718207
    m_seq = 0;
    // m_secs com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1d371b2d
    m_secs = 0;
    // m_nsecs com.eprosima.idl.parser.typecode.PrimitiveTypeCode@543c6f6d
    m_nsecs = 0;
    // m_frame_id com.eprosima.idl.parser.typecode.StringTypeCode@13eb8acf
    m_frame_id ="";
    // m_child_frame_id com.eprosima.idl.parser.typecode.StringTypeCode@43738a82
    m_child_frame_id ="";
    // m_position_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@c81cdd1
    m_position_x = 0.0;
    // m_position_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1fc2b765
    m_position_y = 0.0;
    // m_position_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@75881071
    m_position_z = 0.0;
    // m_orientation_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@22eeefeb
    m_orientation_x = 0.0;
    // m_orientation_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@17d0685f
    m_orientation_y = 0.0;
    // m_orientation_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3891771e
    m_orientation_z = 0.0;
    // m_orientation_w com.eprosima.idl.parser.typecode.PrimitiveTypeCode@78ac1102
    m_orientation_w = 0.0;

}

OdometryMsg::~OdometryMsg()
{












}

OdometryMsg::OdometryMsg(
        const OdometryMsg& x)
{
    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = x.m_frame_id;
    m_child_frame_id = x.m_child_frame_id;
    m_position_x = x.m_position_x;
    m_position_y = x.m_position_y;
    m_position_z = x.m_position_z;
    m_orientation_x = x.m_orientation_x;
    m_orientation_y = x.m_orientation_y;
    m_orientation_z = x.m_orientation_z;
    m_orientation_w = x.m_orientation_w;
}

OdometryMsg::OdometryMsg(
        OdometryMsg&& x)
{
    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = std::move(x.m_frame_id);
    m_child_frame_id = std::move(x.m_child_frame_id);
    m_position_x = x.m_position_x;
    m_position_y = x.m_position_y;
    m_position_z = x.m_position_z;
    m_orientation_x = x.m_orientation_x;
    m_orientation_y = x.m_orientation_y;
    m_orientation_z = x.m_orientation_z;
    m_orientation_w = x.m_orientation_w;
}

OdometryMsg& OdometryMsg::operator =(
        const OdometryMsg& x)
{

    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = x.m_frame_id;
    m_child_frame_id = x.m_child_frame_id;
    m_position_x = x.m_position_x;
    m_position_y = x.m_position_y;
    m_position_z = x.m_position_z;
    m_orientation_x = x.m_orientation_x;
    m_orientation_y = x.m_orientation_y;
    m_orientation_z = x.m_orientation_z;
    m_orientation_w = x.m_orientation_w;

    return *this;
}

OdometryMsg& OdometryMsg::operator =(
        OdometryMsg&& x)
{

    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = std::move(x.m_frame_id);
    m_child_frame_id = std::move(x.m_child_frame_id);
    m_position_x = x.m_position_x;
    m_position_y = x.m_position_y;
    m_position_z = x.m_position_z;
    m_orientation_x = x.m_orientation_x;
    m_orientation_y = x.m_orientation_y;
    m_orientation_z = x.m_orientation_z;
    m_orientation_w = x.m_orientation_w;

    return *this;
}

size_t OdometryMsg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t OdometryMsg::getCdrSerializedSize(
        const OdometryMsg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.child_frame_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void OdometryMsg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_seq;
    scdr << m_secs;
    scdr << m_nsecs;
    scdr << m_frame_id;
    scdr << m_child_frame_id;
    scdr << m_position_x;
    scdr << m_position_y;
    scdr << m_position_z;
    scdr << m_orientation_x;
    scdr << m_orientation_y;
    scdr << m_orientation_z;
    scdr << m_orientation_w;

}

void OdometryMsg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_seq;
    dcdr >> m_secs;
    dcdr >> m_nsecs;
    dcdr >> m_frame_id;
    dcdr >> m_child_frame_id;
    dcdr >> m_position_x;
    dcdr >> m_position_y;
    dcdr >> m_position_z;
    dcdr >> m_orientation_x;
    dcdr >> m_orientation_y;
    dcdr >> m_orientation_z;
    dcdr >> m_orientation_w;
}

/*!
 * @brief This function sets a value in member seq
 * @param _seq New value for member seq
 */
void OdometryMsg::seq(
        uint32_t _seq)
{
    m_seq = _seq;
}

/*!
 * @brief This function returns the value of member seq
 * @return Value of member seq
 */
uint32_t OdometryMsg::seq() const
{
    return m_seq;
}

/*!
 * @brief This function returns a reference to member seq
 * @return Reference to member seq
 */
uint32_t& OdometryMsg::seq()
{
    return m_seq;
}

/*!
 * @brief This function sets a value in member secs
 * @param _secs New value for member secs
 */
void OdometryMsg::secs(
        uint32_t _secs)
{
    m_secs = _secs;
}

/*!
 * @brief This function returns the value of member secs
 * @return Value of member secs
 */
uint32_t OdometryMsg::secs() const
{
    return m_secs;
}

/*!
 * @brief This function returns a reference to member secs
 * @return Reference to member secs
 */
uint32_t& OdometryMsg::secs()
{
    return m_secs;
}

/*!
 * @brief This function sets a value in member nsecs
 * @param _nsecs New value for member nsecs
 */
void OdometryMsg::nsecs(
        uint32_t _nsecs)
{
    m_nsecs = _nsecs;
}

/*!
 * @brief This function returns the value of member nsecs
 * @return Value of member nsecs
 */
uint32_t OdometryMsg::nsecs() const
{
    return m_nsecs;
}

/*!
 * @brief This function returns a reference to member nsecs
 * @return Reference to member nsecs
 */
uint32_t& OdometryMsg::nsecs()
{
    return m_nsecs;
}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void OdometryMsg::frame_id(
        const std::string& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void OdometryMsg::frame_id(
        std::string&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::string& OdometryMsg::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::string& OdometryMsg::frame_id()
{
    return m_frame_id;
}
/*!
 * @brief This function copies the value in member child_frame_id
 * @param _child_frame_id New value to be copied in member child_frame_id
 */
void OdometryMsg::child_frame_id(
        const std::string& _child_frame_id)
{
    m_child_frame_id = _child_frame_id;
}

/*!
 * @brief This function moves the value in member child_frame_id
 * @param _child_frame_id New value to be moved in member child_frame_id
 */
void OdometryMsg::child_frame_id(
        std::string&& _child_frame_id)
{
    m_child_frame_id = std::move(_child_frame_id);
}

/*!
 * @brief This function returns a constant reference to member child_frame_id
 * @return Constant reference to member child_frame_id
 */
const std::string& OdometryMsg::child_frame_id() const
{
    return m_child_frame_id;
}

/*!
 * @brief This function returns a reference to member child_frame_id
 * @return Reference to member child_frame_id
 */
std::string& OdometryMsg::child_frame_id()
{
    return m_child_frame_id;
}
/*!
 * @brief This function sets a value in member position_x
 * @param _position_x New value for member position_x
 */
void OdometryMsg::position_x(
        float _position_x)
{
    m_position_x = _position_x;
}

/*!
 * @brief This function returns the value of member position_x
 * @return Value of member position_x
 */
float OdometryMsg::position_x() const
{
    return m_position_x;
}

/*!
 * @brief This function returns a reference to member position_x
 * @return Reference to member position_x
 */
float& OdometryMsg::position_x()
{
    return m_position_x;
}

/*!
 * @brief This function sets a value in member position_y
 * @param _position_y New value for member position_y
 */
void OdometryMsg::position_y(
        float _position_y)
{
    m_position_y = _position_y;
}

/*!
 * @brief This function returns the value of member position_y
 * @return Value of member position_y
 */
float OdometryMsg::position_y() const
{
    return m_position_y;
}

/*!
 * @brief This function returns a reference to member position_y
 * @return Reference to member position_y
 */
float& OdometryMsg::position_y()
{
    return m_position_y;
}

/*!
 * @brief This function sets a value in member position_z
 * @param _position_z New value for member position_z
 */
void OdometryMsg::position_z(
        float _position_z)
{
    m_position_z = _position_z;
}

/*!
 * @brief This function returns the value of member position_z
 * @return Value of member position_z
 */
float OdometryMsg::position_z() const
{
    return m_position_z;
}

/*!
 * @brief This function returns a reference to member position_z
 * @return Reference to member position_z
 */
float& OdometryMsg::position_z()
{
    return m_position_z;
}

/*!
 * @brief This function sets a value in member orientation_x
 * @param _orientation_x New value for member orientation_x
 */
void OdometryMsg::orientation_x(
        float _orientation_x)
{
    m_orientation_x = _orientation_x;
}

/*!
 * @brief This function returns the value of member orientation_x
 * @return Value of member orientation_x
 */
float OdometryMsg::orientation_x() const
{
    return m_orientation_x;
}

/*!
 * @brief This function returns a reference to member orientation_x
 * @return Reference to member orientation_x
 */
float& OdometryMsg::orientation_x()
{
    return m_orientation_x;
}

/*!
 * @brief This function sets a value in member orientation_y
 * @param _orientation_y New value for member orientation_y
 */
void OdometryMsg::orientation_y(
        float _orientation_y)
{
    m_orientation_y = _orientation_y;
}

/*!
 * @brief This function returns the value of member orientation_y
 * @return Value of member orientation_y
 */
float OdometryMsg::orientation_y() const
{
    return m_orientation_y;
}

/*!
 * @brief This function returns a reference to member orientation_y
 * @return Reference to member orientation_y
 */
float& OdometryMsg::orientation_y()
{
    return m_orientation_y;
}

/*!
 * @brief This function sets a value in member orientation_z
 * @param _orientation_z New value for member orientation_z
 */
void OdometryMsg::orientation_z(
        float _orientation_z)
{
    m_orientation_z = _orientation_z;
}

/*!
 * @brief This function returns the value of member orientation_z
 * @return Value of member orientation_z
 */
float OdometryMsg::orientation_z() const
{
    return m_orientation_z;
}

/*!
 * @brief This function returns a reference to member orientation_z
 * @return Reference to member orientation_z
 */
float& OdometryMsg::orientation_z()
{
    return m_orientation_z;
}

/*!
 * @brief This function sets a value in member orientation_w
 * @param _orientation_w New value for member orientation_w
 */
void OdometryMsg::orientation_w(
        float _orientation_w)
{
    m_orientation_w = _orientation_w;
}

/*!
 * @brief This function returns the value of member orientation_w
 * @return Value of member orientation_w
 */
float OdometryMsg::orientation_w() const
{
    return m_orientation_w;
}

/*!
 * @brief This function returns a reference to member orientation_w
 * @return Reference to member orientation_w
 */
float& OdometryMsg::orientation_w()
{
    return m_orientation_w;
}


size_t OdometryMsg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;















    return current_align;
}

bool OdometryMsg::isKeyDefined()
{
    return false;
}

void OdometryMsg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                
}
