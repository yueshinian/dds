// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MeasureMsg.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _MEASUREMSG_H_
#define _MEASUREMSG_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MeasureMsg_SOURCE)
#define MeasureMsg_DllAPI __declspec( dllexport )
#else
#define MeasureMsg_DllAPI __declspec( dllimport )
#endif // MeasureMsg_SOURCE
#else
#define MeasureMsg_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MeasureMsg_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure MeasureMsg defined by the user in the IDL file.
 * @ingroup MEASUREMSG
 */
class MeasureMsg
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MeasureMsg();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MeasureMsg();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MeasureMsg that will be copied.
     */
    eProsima_user_DllExport MeasureMsg(
            const MeasureMsg& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MeasureMsg that will be copied.
     */
    eProsima_user_DllExport MeasureMsg(
            MeasureMsg&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MeasureMsg that will be copied.
     */
    eProsima_user_DllExport MeasureMsg& operator =(
            const MeasureMsg& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MeasureMsg that will be copied.
     */
    eProsima_user_DllExport MeasureMsg& operator =(
            MeasureMsg&& x);

    /*!
     * @brief This function sets a value in member minX
     * @param _minX New value for member minX
     */
    eProsima_user_DllExport void minX(
            float _minX);

    /*!
     * @brief This function returns the value of member minX
     * @return Value of member minX
     */
    eProsima_user_DllExport float minX() const;

    /*!
     * @brief This function returns a reference to member minX
     * @return Reference to member minX
     */
    eProsima_user_DllExport float& minX();

    /*!
     * @brief This function sets a value in member minY
     * @param _minY New value for member minY
     */
    eProsima_user_DllExport void minY(
            float _minY);

    /*!
     * @brief This function returns the value of member minY
     * @return Value of member minY
     */
    eProsima_user_DllExport float minY() const;

    /*!
     * @brief This function returns a reference to member minY
     * @return Reference to member minY
     */
    eProsima_user_DllExport float& minY();

    /*!
     * @brief This function sets a value in member minZ
     * @param _minZ New value for member minZ
     */
    eProsima_user_DllExport void minZ(
            float _minZ);

    /*!
     * @brief This function returns the value of member minZ
     * @return Value of member minZ
     */
    eProsima_user_DllExport float minZ() const;

    /*!
     * @brief This function returns a reference to member minZ
     * @return Reference to member minZ
     */
    eProsima_user_DllExport float& minZ();

    /*!
     * @brief This function sets a value in member maxX
     * @param _maxX New value for member maxX
     */
    eProsima_user_DllExport void maxX(
            float _maxX);

    /*!
     * @brief This function returns the value of member maxX
     * @return Value of member maxX
     */
    eProsima_user_DllExport float maxX() const;

    /*!
     * @brief This function returns a reference to member maxX
     * @return Reference to member maxX
     */
    eProsima_user_DllExport float& maxX();

    /*!
     * @brief This function sets a value in member maxY
     * @param _maxY New value for member maxY
     */
    eProsima_user_DllExport void maxY(
            float _maxY);

    /*!
     * @brief This function returns the value of member maxY
     * @return Value of member maxY
     */
    eProsima_user_DllExport float maxY() const;

    /*!
     * @brief This function returns a reference to member maxY
     * @return Reference to member maxY
     */
    eProsima_user_DllExport float& maxY();

    /*!
     * @brief This function sets a value in member maxZ
     * @param _maxZ New value for member maxZ
     */
    eProsima_user_DllExport void maxZ(
            float _maxZ);

    /*!
     * @brief This function returns the value of member maxZ
     * @return Value of member maxZ
     */
    eProsima_user_DllExport float maxZ() const;

    /*!
     * @brief This function returns a reference to member maxZ
     * @return Reference to member maxZ
     */
    eProsima_user_DllExport float& maxZ();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const MeasureMsg& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    float m_minX;
    float m_minY;
    float m_minZ;
    float m_maxX;
    float m_maxY;
    float m_maxZ;
};

#endif // _MEASUREMSG_H_