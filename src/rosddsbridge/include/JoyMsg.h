// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file JoyMsg.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _JOYMSG_H_
#define _JOYMSG_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(JoyMsg_SOURCE)
#define JoyMsg_DllAPI __declspec( dllexport )
#else
#define JoyMsg_DllAPI __declspec( dllimport )
#endif // JoyMsg_SOURCE
#else
#define JoyMsg_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define JoyMsg_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure JoyMsg defined by the user in the IDL file.
 * @ingroup JOYMSG
 */
class JoyMsg
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport JoyMsg();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~JoyMsg();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object JoyMsg that will be copied.
     */
    eProsima_user_DllExport JoyMsg(
            const JoyMsg& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object JoyMsg that will be copied.
     */
    eProsima_user_DllExport JoyMsg(
            JoyMsg&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object JoyMsg that will be copied.
     */
    eProsima_user_DllExport JoyMsg& operator =(
            const JoyMsg& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object JoyMsg that will be copied.
     */
    eProsima_user_DllExport JoyMsg& operator =(
            JoyMsg&& x);

    /*!
     * @brief This function sets a value in member seq
     * @param _seq New value for member seq
     */
    eProsima_user_DllExport void seq(
            uint32_t _seq);

    /*!
     * @brief This function returns the value of member seq
     * @return Value of member seq
     */
    eProsima_user_DllExport uint32_t seq() const;

    /*!
     * @brief This function returns a reference to member seq
     * @return Reference to member seq
     */
    eProsima_user_DllExport uint32_t& seq();

    /*!
     * @brief This function sets a value in member secs
     * @param _secs New value for member secs
     */
    eProsima_user_DllExport void secs(
            uint32_t _secs);

    /*!
     * @brief This function returns the value of member secs
     * @return Value of member secs
     */
    eProsima_user_DllExport uint32_t secs() const;

    /*!
     * @brief This function returns a reference to member secs
     * @return Reference to member secs
     */
    eProsima_user_DllExport uint32_t& secs();

    /*!
     * @brief This function sets a value in member nsecs
     * @param _nsecs New value for member nsecs
     */
    eProsima_user_DllExport void nsecs(
            uint32_t _nsecs);

    /*!
     * @brief This function returns the value of member nsecs
     * @return Value of member nsecs
     */
    eProsima_user_DllExport uint32_t nsecs() const;

    /*!
     * @brief This function returns a reference to member nsecs
     * @return Reference to member nsecs
     */
    eProsima_user_DllExport uint32_t& nsecs();

    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::string& _frame_id);

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::string&& _frame_id);

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::string& frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::string& frame_id();
    /*!
     * @brief This function copies the value in member axes
     * @param _axes New value to be copied in member axes
     */
    eProsima_user_DllExport void axes(
            const std::vector<float>& _axes);

    /*!
     * @brief This function moves the value in member axes
     * @param _axes New value to be moved in member axes
     */
    eProsima_user_DllExport void axes(
            std::vector<float>&& _axes);

    /*!
     * @brief This function returns a constant reference to member axes
     * @return Constant reference to member axes
     */
    eProsima_user_DllExport const std::vector<float>& axes() const;

    /*!
     * @brief This function returns a reference to member axes
     * @return Reference to member axes
     */
    eProsima_user_DllExport std::vector<float>& axes();
    /*!
     * @brief This function copies the value in member buttons
     * @param _buttons New value to be copied in member buttons
     */
    eProsima_user_DllExport void buttons(
            const std::vector<int32_t>& _buttons);

    /*!
     * @brief This function moves the value in member buttons
     * @param _buttons New value to be moved in member buttons
     */
    eProsima_user_DllExport void buttons(
            std::vector<int32_t>&& _buttons);

    /*!
     * @brief This function returns a constant reference to member buttons
     * @return Constant reference to member buttons
     */
    eProsima_user_DllExport const std::vector<int32_t>& buttons() const;

    /*!
     * @brief This function returns a reference to member buttons
     * @return Reference to member buttons
     */
    eProsima_user_DllExport std::vector<int32_t>& buttons();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const JoyMsg& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint32_t m_seq;
    uint32_t m_secs;
    uint32_t m_nsecs;
    std::string m_frame_id;
    std::vector<float> m_axes;
    std::vector<int32_t> m_buttons;
};

#endif // _JOYMSG_H_