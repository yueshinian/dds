// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TestDateType.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _TESTDATETYPE_H_
#define _TESTDATETYPE_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TestDateType_SOURCE)
#define TestDateType_DllAPI __declspec( dllexport )
#else
#define TestDateType_DllAPI __declspec( dllimport )
#endif // TestDateType_SOURCE
#else
#define TestDateType_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TestDateType_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure TestDateType defined by the user in the IDL file.
 * @ingroup TESTDATETYPE
 */
class TestDateType
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TestDateType();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TestDateType();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TestDateType that will be copied.
     */
    eProsima_user_DllExport TestDateType(
            const TestDateType& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TestDateType that will be copied.
     */
    eProsima_user_DllExport TestDateType(
            TestDateType&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TestDateType that will be copied.
     */
    eProsima_user_DllExport TestDateType& operator =(
            const TestDateType& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TestDateType that will be copied.
     */
    eProsima_user_DllExport TestDateType& operator =(
            TestDateType&& x);

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            uint8_t _a);

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport uint8_t a() const;

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport uint8_t& a();

    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            char _b);

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport char b() const;

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport char& b();

    /*!
     * @brief This function sets a value in member c
     * @param _c New value for member c
     */
    eProsima_user_DllExport void c(
            wchar_t _c);

    /*!
     * @brief This function returns the value of member c
     * @return Value of member c
     */
    eProsima_user_DllExport wchar_t c() const;

    /*!
     * @brief This function returns a reference to member c
     * @return Reference to member c
     */
    eProsima_user_DllExport wchar_t& c();

    /*!
     * @brief This function sets a value in member d
     * @param _d New value for member d
     */
    eProsima_user_DllExport void d(
            int16_t _d);

    /*!
     * @brief This function returns the value of member d
     * @return Value of member d
     */
    eProsima_user_DllExport int16_t d() const;

    /*!
     * @brief This function returns a reference to member d
     * @return Reference to member d
     */
    eProsima_user_DllExport int16_t& d();

    /*!
     * @brief This function sets a value in member e
     * @param _e New value for member e
     */
    eProsima_user_DllExport void e(
            uint16_t _e);

    /*!
     * @brief This function returns the value of member e
     * @return Value of member e
     */
    eProsima_user_DllExport uint16_t e() const;

    /*!
     * @brief This function returns a reference to member e
     * @return Reference to member e
     */
    eProsima_user_DllExport uint16_t& e();

    /*!
     * @brief This function sets a value in member f
     * @param _f New value for member f
     */
    eProsima_user_DllExport void f(
            int32_t _f);

    /*!
     * @brief This function returns the value of member f
     * @return Value of member f
     */
    eProsima_user_DllExport int32_t f() const;

    /*!
     * @brief This function returns a reference to member f
     * @return Reference to member f
     */
    eProsima_user_DllExport int32_t& f();

    /*!
     * @brief This function sets a value in member g
     * @param _g New value for member g
     */
    eProsima_user_DllExport void g(
            uint32_t _g);

    /*!
     * @brief This function returns the value of member g
     * @return Value of member g
     */
    eProsima_user_DllExport uint32_t g() const;

    /*!
     * @brief This function returns a reference to member g
     * @return Reference to member g
     */
    eProsima_user_DllExport uint32_t& g();

    /*!
     * @brief This function sets a value in member h
     * @param _h New value for member h
     */
    eProsima_user_DllExport void h(
            int64_t _h);

    /*!
     * @brief This function returns the value of member h
     * @return Value of member h
     */
    eProsima_user_DllExport int64_t h() const;

    /*!
     * @brief This function returns a reference to member h
     * @return Reference to member h
     */
    eProsima_user_DllExport int64_t& h();

    /*!
     * @brief This function sets a value in member i
     * @param _i New value for member i
     */
    eProsima_user_DllExport void i(
            uint64_t _i);

    /*!
     * @brief This function returns the value of member i
     * @return Value of member i
     */
    eProsima_user_DllExport uint64_t i() const;

    /*!
     * @brief This function returns a reference to member i
     * @return Reference to member i
     */
    eProsima_user_DllExport uint64_t& i();

    /*!
     * @brief This function sets a value in member j
     * @param _j New value for member j
     */
    eProsima_user_DllExport void j(
            float _j);

    /*!
     * @brief This function returns the value of member j
     * @return Value of member j
     */
    eProsima_user_DllExport float j() const;

    /*!
     * @brief This function returns a reference to member j
     * @return Reference to member j
     */
    eProsima_user_DllExport float& j();

    /*!
     * @brief This function sets a value in member k
     * @param _k New value for member k
     */
    eProsima_user_DllExport void k(
            double _k);

    /*!
     * @brief This function returns the value of member k
     * @return Value of member k
     */
    eProsima_user_DllExport double k() const;

    /*!
     * @brief This function returns a reference to member k
     * @return Reference to member k
     */
    eProsima_user_DllExport double& k();

    /*!
     * @brief This function sets a value in member l
     * @param _l New value for member l
     */
    eProsima_user_DllExport void l(
            long double _l);

    /*!
     * @brief This function returns the value of member l
     * @return Value of member l
     */
    eProsima_user_DllExport long double l() const;

    /*!
     * @brief This function returns a reference to member l
     * @return Reference to member l
     */
    eProsima_user_DllExport long double& l();

    /*!
     * @brief This function sets a value in member m
     * @param _m New value for member m
     */
    eProsima_user_DllExport void m(
            bool _m);

    /*!
     * @brief This function returns the value of member m
     * @return Value of member m
     */
    eProsima_user_DllExport bool m() const;

    /*!
     * @brief This function returns a reference to member m
     * @return Reference to member m
     */
    eProsima_user_DllExport bool& m();

    /*!
     * @brief This function copies the value in member n
     * @param _n New value to be copied in member n
     */
    eProsima_user_DllExport void n(
            const std::vector<int32_t>& _n);

    /*!
     * @brief This function moves the value in member n
     * @param _n New value to be moved in member n
     */
    eProsima_user_DllExport void n(
            std::vector<int32_t>&& _n);

    /*!
     * @brief This function returns a constant reference to member n
     * @return Constant reference to member n
     */
    eProsima_user_DllExport const std::vector<int32_t>& n() const;

    /*!
     * @brief This function returns a reference to member n
     * @return Reference to member n
     */
    eProsima_user_DllExport std::vector<int32_t>& n();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const TestDateType& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint8_t m_a;
    char m_b;
    wchar_t m_c;
    int16_t m_d;
    uint16_t m_e;
    int32_t m_f;
    uint32_t m_g;
    int64_t m_h;
    uint64_t m_i;
    float m_j;
    double m_k;
    long double m_l;
    bool m_m;
    std::vector<int32_t> m_n;
};

#endif // _TESTDATETYPE_H_