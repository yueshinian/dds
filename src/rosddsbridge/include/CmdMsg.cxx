// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CmdMsg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CmdMsg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

CmdMsg::CmdMsg()
{
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@cb0ed20
    m_index = 0;
    // m_str com.eprosima.idl.parser.typecode.StringTypeCode@23fe1d71
    m_str ="";

}

CmdMsg::~CmdMsg()
{


}

CmdMsg::CmdMsg(
        const CmdMsg& x)
{
    m_index = x.m_index;
    m_str = x.m_str;
}

CmdMsg::CmdMsg(
        CmdMsg&& x)
{
    m_index = x.m_index;
    m_str = std::move(x.m_str);
}

CmdMsg& CmdMsg::operator =(
        const CmdMsg& x)
{

    m_index = x.m_index;
    m_str = x.m_str;

    return *this;
}

CmdMsg& CmdMsg::operator =(
        CmdMsg&& x)
{

    m_index = x.m_index;
    m_str = std::move(x.m_str);

    return *this;
}

size_t CmdMsg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t CmdMsg::getCdrSerializedSize(
        const CmdMsg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.str().size() + 1;


    return current_alignment - initial_alignment;
}

void CmdMsg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_str;

}

void CmdMsg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    dcdr >> m_str;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void CmdMsg::index(
        uint64_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint64_t CmdMsg::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint64_t& CmdMsg::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member str
 * @param _str New value to be copied in member str
 */
void CmdMsg::str(
        const std::string& _str)
{
    m_str = _str;
}

/*!
 * @brief This function moves the value in member str
 * @param _str New value to be moved in member str
 */
void CmdMsg::str(
        std::string&& _str)
{
    m_str = std::move(_str);
}

/*!
 * @brief This function returns a constant reference to member str
 * @return Constant reference to member str
 */
const std::string& CmdMsg::str() const
{
    return m_str;
}

/*!
 * @brief This function returns a reference to member str
 * @return Reference to member str
 */
std::string& CmdMsg::str()
{
    return m_str;
}

size_t CmdMsg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool CmdMsg::isKeyDefined()
{
    return false;
}

void CmdMsg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}
