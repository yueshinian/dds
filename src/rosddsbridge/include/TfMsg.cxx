// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TfMsg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TfMsg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

TfMsg::TfMsg()    : TfMsgBase() 
{
    // m_tf_sequence com.eprosima.idl.parser.typecode.SequenceTypeCode@11e21d0e


}

TfMsg::~TfMsg()
{
}

TfMsg::TfMsg(
        const TfMsg& x)    : TfMsgBase(x) 
{
    m_tf_sequence = x.m_tf_sequence;
}

TfMsg::TfMsg(
        TfMsg&& x)    : TfMsgBase(std::move(x)) 
{
    m_tf_sequence = std::move(x.m_tf_sequence);
}

TfMsg& TfMsg::operator =(
        const TfMsg& x)
{
    TfMsgBase::operator =(x); 

    m_tf_sequence = x.m_tf_sequence;

    return *this;
}

TfMsg& TfMsg::operator =(
        TfMsg&& x)
{
    TfMsgBase::operator =(std::move(x)); 

    m_tf_sequence = std::move(x.m_tf_sequence);

    return *this;
}

size_t TfMsg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += TfMsgBase::getMaxCdrSerializedSize(current_alignment); 

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += TfMsgBase::getMaxCdrSerializedSize(current_alignment);}

    return current_alignment - initial_alignment;
}

size_t TfMsg::getCdrSerializedSize(
        const TfMsg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += TfMsgBase::getCdrSerializedSize(data, current_alignment); 

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.tf_sequence().size(); ++a)
    {
        current_alignment += TfMsgBase::getCdrSerializedSize(data.tf_sequence().at(a), current_alignment);}

    return current_alignment - initial_alignment;
}

void TfMsg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    TfMsgBase::serialize(scdr); 

    scdr << m_tf_sequence;
}

void TfMsg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    TfMsgBase::deserialize(dcdr); 

    dcdr >> m_tf_sequence;}

/*!
 * @brief This function copies the value in member tf_sequence
 * @param _tf_sequence New value to be copied in member tf_sequence
 */
void TfMsg::tf_sequence(
        const std::vector<TfMsgBase>& _tf_sequence)
{
    m_tf_sequence = _tf_sequence;
}

/*!
 * @brief This function moves the value in member tf_sequence
 * @param _tf_sequence New value to be moved in member tf_sequence
 */
void TfMsg::tf_sequence(
        std::vector<TfMsgBase>&& _tf_sequence)
{
    m_tf_sequence = std::move(_tf_sequence);
}

/*!
 * @brief This function returns a constant reference to member tf_sequence
 * @return Constant reference to member tf_sequence
 */
const std::vector<TfMsgBase>& TfMsg::tf_sequence() const
{
    return m_tf_sequence;
}

/*!
 * @brief This function returns a reference to member tf_sequence
 * @return Reference to member tf_sequence
 */
std::vector<TfMsgBase>& TfMsg::tf_sequence()
{
    return m_tf_sequence;
}

size_t TfMsg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;

    current_align += TfMsgBase::getKeyMaxCdrSerializedSize(current_align); 


    return current_align;
}

bool TfMsg::isKeyDefined()
{
    if (TfMsgBase::isKeyDefined())
        return true;
     return false;
}

void TfMsg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
    TfMsgBase::serializeKey(scdr); 
     
}
