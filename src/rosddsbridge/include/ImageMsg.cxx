// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ImageMsg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ImageMsg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

ImageMsg::ImageMsg()
{
    // m_seq com.eprosima.idl.parser.typecode.PrimitiveTypeCode@545997b1
    m_seq = 0;
    // m_secs com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4cf4d528
    m_secs = 0.0;
    // m_nsecs com.eprosima.idl.parser.typecode.PrimitiveTypeCode@77846d2c
    m_nsecs = 0.0;
    // m_frame_id com.eprosima.idl.parser.typecode.StringTypeCode@548ad73b
    m_frame_id ="";
    // m_format com.eprosima.idl.parser.typecode.StringTypeCode@4c762604
    m_format ="";
    // m_datacount com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2641e737
    m_datacount = 0;
    // m_data com.eprosima.idl.parser.typecode.SequenceTypeCode@727803de


}

ImageMsg::~ImageMsg()
{







}

ImageMsg::ImageMsg(
        const ImageMsg& x)
{
    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = x.m_frame_id;
    m_format = x.m_format;
    m_datacount = x.m_datacount;
    m_data = x.m_data;
}

ImageMsg::ImageMsg(
        ImageMsg&& x)
{
    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = std::move(x.m_frame_id);
    m_format = std::move(x.m_format);
    m_datacount = x.m_datacount;
    m_data = std::move(x.m_data);
}

ImageMsg& ImageMsg::operator =(
        const ImageMsg& x)
{

    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = x.m_frame_id;
    m_format = x.m_format;
    m_datacount = x.m_datacount;
    m_data = x.m_data;

    return *this;
}

ImageMsg& ImageMsg::operator =(
        ImageMsg&& x)
{

    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = std::move(x.m_frame_id);
    m_format = std::move(x.m_format);
    m_datacount = x.m_datacount;
    m_data = std::move(x.m_data);

    return *this;
}

size_t ImageMsg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (1000000 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

size_t ImageMsg::getCdrSerializedSize(
        const ImageMsg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.format().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }




    return current_alignment - initial_alignment;
}

void ImageMsg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_seq;
    scdr << m_secs;
    scdr << m_nsecs;
    scdr << m_frame_id;
    scdr << m_format;
    scdr << m_datacount;
    scdr << m_data;

}

void ImageMsg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_seq;
    dcdr >> m_secs;
    dcdr >> m_nsecs;
    dcdr >> m_frame_id;
    dcdr >> m_format;
    dcdr >> m_datacount;
    dcdr >> m_data;
}

/*!
 * @brief This function sets a value in member seq
 * @param _seq New value for member seq
 */
void ImageMsg::seq(
        uint32_t _seq)
{
    m_seq = _seq;
}

/*!
 * @brief This function returns the value of member seq
 * @return Value of member seq
 */
uint32_t ImageMsg::seq() const
{
    return m_seq;
}

/*!
 * @brief This function returns a reference to member seq
 * @return Reference to member seq
 */
uint32_t& ImageMsg::seq()
{
    return m_seq;
}

/*!
 * @brief This function sets a value in member secs
 * @param _secs New value for member secs
 */
void ImageMsg::secs(
        double _secs)
{
    m_secs = _secs;
}

/*!
 * @brief This function returns the value of member secs
 * @return Value of member secs
 */
double ImageMsg::secs() const
{
    return m_secs;
}

/*!
 * @brief This function returns a reference to member secs
 * @return Reference to member secs
 */
double& ImageMsg::secs()
{
    return m_secs;
}

/*!
 * @brief This function sets a value in member nsecs
 * @param _nsecs New value for member nsecs
 */
void ImageMsg::nsecs(
        float _nsecs)
{
    m_nsecs = _nsecs;
}

/*!
 * @brief This function returns the value of member nsecs
 * @return Value of member nsecs
 */
float ImageMsg::nsecs() const
{
    return m_nsecs;
}

/*!
 * @brief This function returns a reference to member nsecs
 * @return Reference to member nsecs
 */
float& ImageMsg::nsecs()
{
    return m_nsecs;
}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void ImageMsg::frame_id(
        const std::string& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void ImageMsg::frame_id(
        std::string&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::string& ImageMsg::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::string& ImageMsg::frame_id()
{
    return m_frame_id;
}
/*!
 * @brief This function copies the value in member format
 * @param _format New value to be copied in member format
 */
void ImageMsg::format(
        const std::string& _format)
{
    m_format = _format;
}

/*!
 * @brief This function moves the value in member format
 * @param _format New value to be moved in member format
 */
void ImageMsg::format(
        std::string&& _format)
{
    m_format = std::move(_format);
}

/*!
 * @brief This function returns a constant reference to member format
 * @return Constant reference to member format
 */
const std::string& ImageMsg::format() const
{
    return m_format;
}

/*!
 * @brief This function returns a reference to member format
 * @return Reference to member format
 */
std::string& ImageMsg::format()
{
    return m_format;
}
/*!
 * @brief This function sets a value in member datacount
 * @param _datacount New value for member datacount
 */
void ImageMsg::datacount(
        uint32_t _datacount)
{
    m_datacount = _datacount;
}

/*!
 * @brief This function returns the value of member datacount
 * @return Value of member datacount
 */
uint32_t ImageMsg::datacount() const
{
    return m_datacount;
}

/*!
 * @brief This function returns a reference to member datacount
 * @return Reference to member datacount
 */
uint32_t& ImageMsg::datacount()
{
    return m_datacount;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void ImageMsg::data(
        const std::vector<char>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void ImageMsg::data(
        std::vector<char>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<char>& ImageMsg::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<char>& ImageMsg::data()
{
    return m_data;
}

size_t ImageMsg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;










    return current_align;
}

bool ImageMsg::isKeyDefined()
{
    return false;
}

void ImageMsg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
           
}
