// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PclMsg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "PclMsg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

PclMsg::PclMsg()
{
    // m_seq com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2fd66ad3
    m_seq = 0;
    // m_secs com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5d11346a
    m_secs = 0;
    // m_nsecs com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7a36aefa
    m_nsecs = 0;
    // m_frame_id com.eprosima.idl.parser.typecode.StringTypeCode@17211155
    m_frame_id ="";
    // m_height com.eprosima.idl.parser.typecode.PrimitiveTypeCode@b3d7190
    m_height = 0;
    // m_width com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5fdba6f9
    m_width = 0;
    // m_PointFileds_name com.eprosima.idl.parser.typecode.ArrayTypeCode@10d59286

    // m_PointFileds_offset com.eprosima.idl.parser.typecode.ArrayTypeCode@fe18270
    memset(&m_PointFileds_offset, 0, (4) * 4);
    // m_PointFileds_datatype com.eprosima.idl.parser.typecode.ArrayTypeCode@5123a213
    memset(&m_PointFileds_datatype, 0, (4) * 1);
    // m_PointFileds_count com.eprosima.idl.parser.typecode.ArrayTypeCode@52525845
    memset(&m_PointFileds_count, 0, (4) * 4);
    // m_is_bigendian com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3b94d659
    m_is_bigendian = false;
    // m_point_step com.eprosima.idl.parser.typecode.PrimitiveTypeCode@24b1d79b
    m_point_step = 0;
    // m_row_step com.eprosima.idl.parser.typecode.PrimitiveTypeCode@68ceda24
    m_row_step = 0;
    // m_datacount com.eprosima.idl.parser.typecode.PrimitiveTypeCode@281e3708
    m_datacount = 0;
    // m_data com.eprosima.idl.parser.typecode.SequenceTypeCode@35a50a4c

    // m_is_dense com.eprosima.idl.parser.typecode.PrimitiveTypeCode@587c290d
    m_is_dense = false;

}

PclMsg::~PclMsg()
{
















}

PclMsg::PclMsg(
        const PclMsg& x)
{
    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = x.m_frame_id;
    m_height = x.m_height;
    m_width = x.m_width;
    m_PointFileds_name = x.m_PointFileds_name;
    m_PointFileds_offset = x.m_PointFileds_offset;
    m_PointFileds_datatype = x.m_PointFileds_datatype;
    m_PointFileds_count = x.m_PointFileds_count;
    m_is_bigendian = x.m_is_bigendian;
    m_point_step = x.m_point_step;
    m_row_step = x.m_row_step;
    m_datacount = x.m_datacount;
    m_data = x.m_data;
    m_is_dense = x.m_is_dense;
}

PclMsg::PclMsg(
        PclMsg&& x)
{
    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = std::move(x.m_frame_id);
    m_height = x.m_height;
    m_width = x.m_width;
    m_PointFileds_name = std::move(x.m_PointFileds_name);
    m_PointFileds_offset = std::move(x.m_PointFileds_offset);
    m_PointFileds_datatype = std::move(x.m_PointFileds_datatype);
    m_PointFileds_count = std::move(x.m_PointFileds_count);
    m_is_bigendian = x.m_is_bigendian;
    m_point_step = x.m_point_step;
    m_row_step = x.m_row_step;
    m_datacount = x.m_datacount;
    m_data = std::move(x.m_data);
    m_is_dense = x.m_is_dense;
}

PclMsg& PclMsg::operator =(
        const PclMsg& x)
{

    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = x.m_frame_id;
    m_height = x.m_height;
    m_width = x.m_width;
    m_PointFileds_name = x.m_PointFileds_name;
    m_PointFileds_offset = x.m_PointFileds_offset;
    m_PointFileds_datatype = x.m_PointFileds_datatype;
    m_PointFileds_count = x.m_PointFileds_count;
    m_is_bigendian = x.m_is_bigendian;
    m_point_step = x.m_point_step;
    m_row_step = x.m_row_step;
    m_datacount = x.m_datacount;
    m_data = x.m_data;
    m_is_dense = x.m_is_dense;

    return *this;
}

PclMsg& PclMsg::operator =(
        PclMsg&& x)
{

    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = std::move(x.m_frame_id);
    m_height = x.m_height;
    m_width = x.m_width;
    m_PointFileds_name = std::move(x.m_PointFileds_name);
    m_PointFileds_offset = std::move(x.m_PointFileds_offset);
    m_PointFileds_datatype = std::move(x.m_PointFileds_datatype);
    m_PointFileds_count = std::move(x.m_PointFileds_count);
    m_is_bigendian = x.m_is_bigendian;
    m_point_step = x.m_point_step;
    m_row_step = x.m_row_step;
    m_datacount = x.m_datacount;
    m_data = std::move(x.m_data);
    m_is_dense = x.m_is_dense;

    return *this;
}

size_t PclMsg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    for(size_t a = 0; a < (4); ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;
    }
    current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((4) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (700000 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t PclMsg::getCdrSerializedSize(
        const PclMsg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    for(size_t a = 0; a < data.PointFileds_name().size(); ++a)
    {
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.PointFileds_name().at(a).size() + 1;

    }
    if ((4) > 0)
    {
        current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((4) > 0)
    {
        current_alignment += ((4) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    if ((4) > 0)
    {
        current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void PclMsg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_seq;
    scdr << m_secs;
    scdr << m_nsecs;
    scdr << m_frame_id;
    scdr << m_height;
    scdr << m_width;
    scdr << m_PointFileds_name;
    scdr << m_PointFileds_offset;

    scdr << m_PointFileds_datatype;

    scdr << m_PointFileds_count;

    scdr << m_is_bigendian;
    scdr << m_point_step;
    scdr << m_row_step;
    scdr << m_datacount;
    scdr << m_data;
    scdr << m_is_dense;

}

void PclMsg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_seq;
    dcdr >> m_secs;
    dcdr >> m_nsecs;
    dcdr >> m_frame_id;
    dcdr >> m_height;
    dcdr >> m_width;
    dcdr >> m_PointFileds_name;
    dcdr >> m_PointFileds_offset;

    dcdr >> m_PointFileds_datatype;

    dcdr >> m_PointFileds_count;

    dcdr >> m_is_bigendian;
    dcdr >> m_point_step;
    dcdr >> m_row_step;
    dcdr >> m_datacount;
    dcdr >> m_data;
    dcdr >> m_is_dense;
}

/*!
 * @brief This function sets a value in member seq
 * @param _seq New value for member seq
 */
void PclMsg::seq(
        uint32_t _seq)
{
    m_seq = _seq;
}

/*!
 * @brief This function returns the value of member seq
 * @return Value of member seq
 */
uint32_t PclMsg::seq() const
{
    return m_seq;
}

/*!
 * @brief This function returns a reference to member seq
 * @return Reference to member seq
 */
uint32_t& PclMsg::seq()
{
    return m_seq;
}

/*!
 * @brief This function sets a value in member secs
 * @param _secs New value for member secs
 */
void PclMsg::secs(
        uint32_t _secs)
{
    m_secs = _secs;
}

/*!
 * @brief This function returns the value of member secs
 * @return Value of member secs
 */
uint32_t PclMsg::secs() const
{
    return m_secs;
}

/*!
 * @brief This function returns a reference to member secs
 * @return Reference to member secs
 */
uint32_t& PclMsg::secs()
{
    return m_secs;
}

/*!
 * @brief This function sets a value in member nsecs
 * @param _nsecs New value for member nsecs
 */
void PclMsg::nsecs(
        uint32_t _nsecs)
{
    m_nsecs = _nsecs;
}

/*!
 * @brief This function returns the value of member nsecs
 * @return Value of member nsecs
 */
uint32_t PclMsg::nsecs() const
{
    return m_nsecs;
}

/*!
 * @brief This function returns a reference to member nsecs
 * @return Reference to member nsecs
 */
uint32_t& PclMsg::nsecs()
{
    return m_nsecs;
}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void PclMsg::frame_id(
        const std::string& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void PclMsg::frame_id(
        std::string&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::string& PclMsg::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::string& PclMsg::frame_id()
{
    return m_frame_id;
}
/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void PclMsg::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint32_t PclMsg::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint32_t& PclMsg::height()
{
    return m_height;
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void PclMsg::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint32_t PclMsg::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint32_t& PclMsg::width()
{
    return m_width;
}

/*!
 * @brief This function copies the value in member PointFileds_name
 * @param _PointFileds_name New value to be copied in member PointFileds_name
 */
void PclMsg::PointFileds_name(
        const std::array<std::string, 4>& _PointFileds_name)
{
    m_PointFileds_name = _PointFileds_name;
}

/*!
 * @brief This function moves the value in member PointFileds_name
 * @param _PointFileds_name New value to be moved in member PointFileds_name
 */
void PclMsg::PointFileds_name(
        std::array<std::string, 4>&& _PointFileds_name)
{
    m_PointFileds_name = std::move(_PointFileds_name);
}

/*!
 * @brief This function returns a constant reference to member PointFileds_name
 * @return Constant reference to member PointFileds_name
 */
const std::array<std::string, 4>& PclMsg::PointFileds_name() const
{
    return m_PointFileds_name;
}

/*!
 * @brief This function returns a reference to member PointFileds_name
 * @return Reference to member PointFileds_name
 */
std::array<std::string, 4>& PclMsg::PointFileds_name()
{
    return m_PointFileds_name;
}
/*!
 * @brief This function copies the value in member PointFileds_offset
 * @param _PointFileds_offset New value to be copied in member PointFileds_offset
 */
void PclMsg::PointFileds_offset(
        const std::array<uint32_t, 4>& _PointFileds_offset)
{
    m_PointFileds_offset = _PointFileds_offset;
}

/*!
 * @brief This function moves the value in member PointFileds_offset
 * @param _PointFileds_offset New value to be moved in member PointFileds_offset
 */
void PclMsg::PointFileds_offset(
        std::array<uint32_t, 4>&& _PointFileds_offset)
{
    m_PointFileds_offset = std::move(_PointFileds_offset);
}

/*!
 * @brief This function returns a constant reference to member PointFileds_offset
 * @return Constant reference to member PointFileds_offset
 */
const std::array<uint32_t, 4>& PclMsg::PointFileds_offset() const
{
    return m_PointFileds_offset;
}

/*!
 * @brief This function returns a reference to member PointFileds_offset
 * @return Reference to member PointFileds_offset
 */
std::array<uint32_t, 4>& PclMsg::PointFileds_offset()
{
    return m_PointFileds_offset;
}
/*!
 * @brief This function copies the value in member PointFileds_datatype
 * @param _PointFileds_datatype New value to be copied in member PointFileds_datatype
 */
void PclMsg::PointFileds_datatype(
        const std::array<uint8_t, 4>& _PointFileds_datatype)
{
    m_PointFileds_datatype = _PointFileds_datatype;
}

/*!
 * @brief This function moves the value in member PointFileds_datatype
 * @param _PointFileds_datatype New value to be moved in member PointFileds_datatype
 */
void PclMsg::PointFileds_datatype(
        std::array<uint8_t, 4>&& _PointFileds_datatype)
{
    m_PointFileds_datatype = std::move(_PointFileds_datatype);
}

/*!
 * @brief This function returns a constant reference to member PointFileds_datatype
 * @return Constant reference to member PointFileds_datatype
 */
const std::array<uint8_t, 4>& PclMsg::PointFileds_datatype() const
{
    return m_PointFileds_datatype;
}

/*!
 * @brief This function returns a reference to member PointFileds_datatype
 * @return Reference to member PointFileds_datatype
 */
std::array<uint8_t, 4>& PclMsg::PointFileds_datatype()
{
    return m_PointFileds_datatype;
}
/*!
 * @brief This function copies the value in member PointFileds_count
 * @param _PointFileds_count New value to be copied in member PointFileds_count
 */
void PclMsg::PointFileds_count(
        const std::array<uint32_t, 4>& _PointFileds_count)
{
    m_PointFileds_count = _PointFileds_count;
}

/*!
 * @brief This function moves the value in member PointFileds_count
 * @param _PointFileds_count New value to be moved in member PointFileds_count
 */
void PclMsg::PointFileds_count(
        std::array<uint32_t, 4>&& _PointFileds_count)
{
    m_PointFileds_count = std::move(_PointFileds_count);
}

/*!
 * @brief This function returns a constant reference to member PointFileds_count
 * @return Constant reference to member PointFileds_count
 */
const std::array<uint32_t, 4>& PclMsg::PointFileds_count() const
{
    return m_PointFileds_count;
}

/*!
 * @brief This function returns a reference to member PointFileds_count
 * @return Reference to member PointFileds_count
 */
std::array<uint32_t, 4>& PclMsg::PointFileds_count()
{
    return m_PointFileds_count;
}
/*!
 * @brief This function sets a value in member is_bigendian
 * @param _is_bigendian New value for member is_bigendian
 */
void PclMsg::is_bigendian(
        bool _is_bigendian)
{
    m_is_bigendian = _is_bigendian;
}

/*!
 * @brief This function returns the value of member is_bigendian
 * @return Value of member is_bigendian
 */
bool PclMsg::is_bigendian() const
{
    return m_is_bigendian;
}

/*!
 * @brief This function returns a reference to member is_bigendian
 * @return Reference to member is_bigendian
 */
bool& PclMsg::is_bigendian()
{
    return m_is_bigendian;
}

/*!
 * @brief This function sets a value in member point_step
 * @param _point_step New value for member point_step
 */
void PclMsg::point_step(
        uint32_t _point_step)
{
    m_point_step = _point_step;
}

/*!
 * @brief This function returns the value of member point_step
 * @return Value of member point_step
 */
uint32_t PclMsg::point_step() const
{
    return m_point_step;
}

/*!
 * @brief This function returns a reference to member point_step
 * @return Reference to member point_step
 */
uint32_t& PclMsg::point_step()
{
    return m_point_step;
}

/*!
 * @brief This function sets a value in member row_step
 * @param _row_step New value for member row_step
 */
void PclMsg::row_step(
        uint32_t _row_step)
{
    m_row_step = _row_step;
}

/*!
 * @brief This function returns the value of member row_step
 * @return Value of member row_step
 */
uint32_t PclMsg::row_step() const
{
    return m_row_step;
}

/*!
 * @brief This function returns a reference to member row_step
 * @return Reference to member row_step
 */
uint32_t& PclMsg::row_step()
{
    return m_row_step;
}

/*!
 * @brief This function sets a value in member datacount
 * @param _datacount New value for member datacount
 */
void PclMsg::datacount(
        uint32_t _datacount)
{
    m_datacount = _datacount;
}

/*!
 * @brief This function returns the value of member datacount
 * @return Value of member datacount
 */
uint32_t PclMsg::datacount() const
{
    return m_datacount;
}

/*!
 * @brief This function returns a reference to member datacount
 * @return Reference to member datacount
 */
uint32_t& PclMsg::datacount()
{
    return m_datacount;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void PclMsg::data(
        const std::vector<char>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void PclMsg::data(
        std::vector<char>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<char>& PclMsg::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<char>& PclMsg::data()
{
    return m_data;
}
/*!
 * @brief This function sets a value in member is_dense
 * @param _is_dense New value for member is_dense
 */
void PclMsg::is_dense(
        bool _is_dense)
{
    m_is_dense = _is_dense;
}

/*!
 * @brief This function returns the value of member is_dense
 * @return Value of member is_dense
 */
bool PclMsg::is_dense() const
{
    return m_is_dense;
}

/*!
 * @brief This function returns a reference to member is_dense
 * @return Reference to member is_dense
 */
bool& PclMsg::is_dense()
{
    return m_is_dense;
}


size_t PclMsg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



















    return current_align;
}

bool PclMsg::isKeyDefined()
{
    return false;
}

void PclMsg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                    
}
