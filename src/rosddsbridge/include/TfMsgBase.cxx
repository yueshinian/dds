// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TfMsgBase.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TfMsgBase.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

TfMsgBase::TfMsgBase()
{
    // m_seq com.eprosima.idl.parser.typecode.PrimitiveTypeCode@32eebfca
    m_seq = 0;
    // m_secs com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4e718207
    m_secs = 0;
    // m_nsecs com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1d371b2d
    m_nsecs = 0;
    // m_frame_id com.eprosima.idl.parser.typecode.StringTypeCode@543c6f6d
    m_frame_id ="";
    // m_child_frame_id com.eprosima.idl.parser.typecode.StringTypeCode@7403c468
    m_child_frame_id ="";
    // m_translation_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@43738a82
    m_translation_x = 0.0;
    // m_translation_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@c81cdd1
    m_translation_y = 0.0;
    // m_translation_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1fc2b765
    m_translation_z = 0.0;
    // m_rotation_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@289d1c02
    m_rotation_x = 0.0;
    // m_rotation_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@22eeefeb
    m_rotation_y = 0.0;
    // m_rotation_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@17d0685f
    m_rotation_z = 0.0;
    // m_rotation_w com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3891771e
    m_rotation_w = 0.0;

}

TfMsgBase::~TfMsgBase()
{












}

TfMsgBase::TfMsgBase(
        const TfMsgBase& x)
{
    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = x.m_frame_id;
    m_child_frame_id = x.m_child_frame_id;
    m_translation_x = x.m_translation_x;
    m_translation_y = x.m_translation_y;
    m_translation_z = x.m_translation_z;
    m_rotation_x = x.m_rotation_x;
    m_rotation_y = x.m_rotation_y;
    m_rotation_z = x.m_rotation_z;
    m_rotation_w = x.m_rotation_w;
}

TfMsgBase::TfMsgBase(
        TfMsgBase&& x)
{
    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = std::move(x.m_frame_id);
    m_child_frame_id = std::move(x.m_child_frame_id);
    m_translation_x = x.m_translation_x;
    m_translation_y = x.m_translation_y;
    m_translation_z = x.m_translation_z;
    m_rotation_x = x.m_rotation_x;
    m_rotation_y = x.m_rotation_y;
    m_rotation_z = x.m_rotation_z;
    m_rotation_w = x.m_rotation_w;
}

TfMsgBase& TfMsgBase::operator =(
        const TfMsgBase& x)
{

    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = x.m_frame_id;
    m_child_frame_id = x.m_child_frame_id;
    m_translation_x = x.m_translation_x;
    m_translation_y = x.m_translation_y;
    m_translation_z = x.m_translation_z;
    m_rotation_x = x.m_rotation_x;
    m_rotation_y = x.m_rotation_y;
    m_rotation_z = x.m_rotation_z;
    m_rotation_w = x.m_rotation_w;

    return *this;
}

TfMsgBase& TfMsgBase::operator =(
        TfMsgBase&& x)
{

    m_seq = x.m_seq;
    m_secs = x.m_secs;
    m_nsecs = x.m_nsecs;
    m_frame_id = std::move(x.m_frame_id);
    m_child_frame_id = std::move(x.m_child_frame_id);
    m_translation_x = x.m_translation_x;
    m_translation_y = x.m_translation_y;
    m_translation_z = x.m_translation_z;
    m_rotation_x = x.m_rotation_x;
    m_rotation_y = x.m_rotation_y;
    m_rotation_z = x.m_rotation_z;
    m_rotation_w = x.m_rotation_w;

    return *this;
}

size_t TfMsgBase::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t TfMsgBase::getCdrSerializedSize(
        const TfMsgBase& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.child_frame_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void TfMsgBase::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_seq;
    scdr << m_secs;
    scdr << m_nsecs;
    scdr << m_frame_id;
    scdr << m_child_frame_id;
    scdr << m_translation_x;
    scdr << m_translation_y;
    scdr << m_translation_z;
    scdr << m_rotation_x;
    scdr << m_rotation_y;
    scdr << m_rotation_z;
    scdr << m_rotation_w;

}

void TfMsgBase::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_seq;
    dcdr >> m_secs;
    dcdr >> m_nsecs;
    dcdr >> m_frame_id;
    dcdr >> m_child_frame_id;
    dcdr >> m_translation_x;
    dcdr >> m_translation_y;
    dcdr >> m_translation_z;
    dcdr >> m_rotation_x;
    dcdr >> m_rotation_y;
    dcdr >> m_rotation_z;
    dcdr >> m_rotation_w;
}

/*!
 * @brief This function sets a value in member seq
 * @param _seq New value for member seq
 */
void TfMsgBase::seq(
        uint32_t _seq)
{
    m_seq = _seq;
}

/*!
 * @brief This function returns the value of member seq
 * @return Value of member seq
 */
uint32_t TfMsgBase::seq() const
{
    return m_seq;
}

/*!
 * @brief This function returns a reference to member seq
 * @return Reference to member seq
 */
uint32_t& TfMsgBase::seq()
{
    return m_seq;
}

/*!
 * @brief This function sets a value in member secs
 * @param _secs New value for member secs
 */
void TfMsgBase::secs(
        uint32_t _secs)
{
    m_secs = _secs;
}

/*!
 * @brief This function returns the value of member secs
 * @return Value of member secs
 */
uint32_t TfMsgBase::secs() const
{
    return m_secs;
}

/*!
 * @brief This function returns a reference to member secs
 * @return Reference to member secs
 */
uint32_t& TfMsgBase::secs()
{
    return m_secs;
}

/*!
 * @brief This function sets a value in member nsecs
 * @param _nsecs New value for member nsecs
 */
void TfMsgBase::nsecs(
        uint32_t _nsecs)
{
    m_nsecs = _nsecs;
}

/*!
 * @brief This function returns the value of member nsecs
 * @return Value of member nsecs
 */
uint32_t TfMsgBase::nsecs() const
{
    return m_nsecs;
}

/*!
 * @brief This function returns a reference to member nsecs
 * @return Reference to member nsecs
 */
uint32_t& TfMsgBase::nsecs()
{
    return m_nsecs;
}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void TfMsgBase::frame_id(
        const std::string& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void TfMsgBase::frame_id(
        std::string&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::string& TfMsgBase::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::string& TfMsgBase::frame_id()
{
    return m_frame_id;
}
/*!
 * @brief This function copies the value in member child_frame_id
 * @param _child_frame_id New value to be copied in member child_frame_id
 */
void TfMsgBase::child_frame_id(
        const std::string& _child_frame_id)
{
    m_child_frame_id = _child_frame_id;
}

/*!
 * @brief This function moves the value in member child_frame_id
 * @param _child_frame_id New value to be moved in member child_frame_id
 */
void TfMsgBase::child_frame_id(
        std::string&& _child_frame_id)
{
    m_child_frame_id = std::move(_child_frame_id);
}

/*!
 * @brief This function returns a constant reference to member child_frame_id
 * @return Constant reference to member child_frame_id
 */
const std::string& TfMsgBase::child_frame_id() const
{
    return m_child_frame_id;
}

/*!
 * @brief This function returns a reference to member child_frame_id
 * @return Reference to member child_frame_id
 */
std::string& TfMsgBase::child_frame_id()
{
    return m_child_frame_id;
}
/*!
 * @brief This function sets a value in member translation_x
 * @param _translation_x New value for member translation_x
 */
void TfMsgBase::translation_x(
        float _translation_x)
{
    m_translation_x = _translation_x;
}

/*!
 * @brief This function returns the value of member translation_x
 * @return Value of member translation_x
 */
float TfMsgBase::translation_x() const
{
    return m_translation_x;
}

/*!
 * @brief This function returns a reference to member translation_x
 * @return Reference to member translation_x
 */
float& TfMsgBase::translation_x()
{
    return m_translation_x;
}

/*!
 * @brief This function sets a value in member translation_y
 * @param _translation_y New value for member translation_y
 */
void TfMsgBase::translation_y(
        float _translation_y)
{
    m_translation_y = _translation_y;
}

/*!
 * @brief This function returns the value of member translation_y
 * @return Value of member translation_y
 */
float TfMsgBase::translation_y() const
{
    return m_translation_y;
}

/*!
 * @brief This function returns a reference to member translation_y
 * @return Reference to member translation_y
 */
float& TfMsgBase::translation_y()
{
    return m_translation_y;
}

/*!
 * @brief This function sets a value in member translation_z
 * @param _translation_z New value for member translation_z
 */
void TfMsgBase::translation_z(
        float _translation_z)
{
    m_translation_z = _translation_z;
}

/*!
 * @brief This function returns the value of member translation_z
 * @return Value of member translation_z
 */
float TfMsgBase::translation_z() const
{
    return m_translation_z;
}

/*!
 * @brief This function returns a reference to member translation_z
 * @return Reference to member translation_z
 */
float& TfMsgBase::translation_z()
{
    return m_translation_z;
}

/*!
 * @brief This function sets a value in member rotation_x
 * @param _rotation_x New value for member rotation_x
 */
void TfMsgBase::rotation_x(
        float _rotation_x)
{
    m_rotation_x = _rotation_x;
}

/*!
 * @brief This function returns the value of member rotation_x
 * @return Value of member rotation_x
 */
float TfMsgBase::rotation_x() const
{
    return m_rotation_x;
}

/*!
 * @brief This function returns a reference to member rotation_x
 * @return Reference to member rotation_x
 */
float& TfMsgBase::rotation_x()
{
    return m_rotation_x;
}

/*!
 * @brief This function sets a value in member rotation_y
 * @param _rotation_y New value for member rotation_y
 */
void TfMsgBase::rotation_y(
        float _rotation_y)
{
    m_rotation_y = _rotation_y;
}

/*!
 * @brief This function returns the value of member rotation_y
 * @return Value of member rotation_y
 */
float TfMsgBase::rotation_y() const
{
    return m_rotation_y;
}

/*!
 * @brief This function returns a reference to member rotation_y
 * @return Reference to member rotation_y
 */
float& TfMsgBase::rotation_y()
{
    return m_rotation_y;
}

/*!
 * @brief This function sets a value in member rotation_z
 * @param _rotation_z New value for member rotation_z
 */
void TfMsgBase::rotation_z(
        float _rotation_z)
{
    m_rotation_z = _rotation_z;
}

/*!
 * @brief This function returns the value of member rotation_z
 * @return Value of member rotation_z
 */
float TfMsgBase::rotation_z() const
{
    return m_rotation_z;
}

/*!
 * @brief This function returns a reference to member rotation_z
 * @return Reference to member rotation_z
 */
float& TfMsgBase::rotation_z()
{
    return m_rotation_z;
}

/*!
 * @brief This function sets a value in member rotation_w
 * @param _rotation_w New value for member rotation_w
 */
void TfMsgBase::rotation_w(
        float _rotation_w)
{
    m_rotation_w = _rotation_w;
}

/*!
 * @brief This function returns the value of member rotation_w
 * @return Value of member rotation_w
 */
float TfMsgBase::rotation_w() const
{
    return m_rotation_w;
}

/*!
 * @brief This function returns a reference to member rotation_w
 * @return Reference to member rotation_w
 */
float& TfMsgBase::rotation_w()
{
    return m_rotation_w;
}


size_t TfMsgBase::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;















    return current_align;
}

bool TfMsgBase::isKeyDefined()
{
    return false;
}

void TfMsgBase::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
                
}
