// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TwistMsg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TwistMsg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

TwistMsg::TwistMsg()
{
    // m_linear_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@69b0fd6f
    m_linear_x = 0.0;
    // m_linear_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@757942a1
    m_linear_y = 0.0;
    // m_linear_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4a87761d
    m_linear_z = 0.0;
    // m_angular_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@66d1af89
    m_angular_x = 0.0;
    // m_angular_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@8646db9
    m_angular_y = 0.0;
    // m_angular_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@37374a5e
    m_angular_z = 0.0;

}

TwistMsg::~TwistMsg()
{






}

TwistMsg::TwistMsg(
        const TwistMsg& x)
{
    m_linear_x = x.m_linear_x;
    m_linear_y = x.m_linear_y;
    m_linear_z = x.m_linear_z;
    m_angular_x = x.m_angular_x;
    m_angular_y = x.m_angular_y;
    m_angular_z = x.m_angular_z;
}

TwistMsg::TwistMsg(
        TwistMsg&& x)
{
    m_linear_x = x.m_linear_x;
    m_linear_y = x.m_linear_y;
    m_linear_z = x.m_linear_z;
    m_angular_x = x.m_angular_x;
    m_angular_y = x.m_angular_y;
    m_angular_z = x.m_angular_z;
}

TwistMsg& TwistMsg::operator =(
        const TwistMsg& x)
{

    m_linear_x = x.m_linear_x;
    m_linear_y = x.m_linear_y;
    m_linear_z = x.m_linear_z;
    m_angular_x = x.m_angular_x;
    m_angular_y = x.m_angular_y;
    m_angular_z = x.m_angular_z;

    return *this;
}

TwistMsg& TwistMsg::operator =(
        TwistMsg&& x)
{

    m_linear_x = x.m_linear_x;
    m_linear_y = x.m_linear_y;
    m_linear_z = x.m_linear_z;
    m_angular_x = x.m_angular_x;
    m_angular_y = x.m_angular_y;
    m_angular_z = x.m_angular_z;

    return *this;
}

size_t TwistMsg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t TwistMsg::getCdrSerializedSize(
        const TwistMsg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void TwistMsg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_linear_x;
    scdr << m_linear_y;
    scdr << m_linear_z;
    scdr << m_angular_x;
    scdr << m_angular_y;
    scdr << m_angular_z;

}

void TwistMsg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_linear_x;
    dcdr >> m_linear_y;
    dcdr >> m_linear_z;
    dcdr >> m_angular_x;
    dcdr >> m_angular_y;
    dcdr >> m_angular_z;
}

/*!
 * @brief This function sets a value in member linear_x
 * @param _linear_x New value for member linear_x
 */
void TwistMsg::linear_x(
        double _linear_x)
{
    m_linear_x = _linear_x;
}

/*!
 * @brief This function returns the value of member linear_x
 * @return Value of member linear_x
 */
double TwistMsg::linear_x() const
{
    return m_linear_x;
}

/*!
 * @brief This function returns a reference to member linear_x
 * @return Reference to member linear_x
 */
double& TwistMsg::linear_x()
{
    return m_linear_x;
}

/*!
 * @brief This function sets a value in member linear_y
 * @param _linear_y New value for member linear_y
 */
void TwistMsg::linear_y(
        double _linear_y)
{
    m_linear_y = _linear_y;
}

/*!
 * @brief This function returns the value of member linear_y
 * @return Value of member linear_y
 */
double TwistMsg::linear_y() const
{
    return m_linear_y;
}

/*!
 * @brief This function returns a reference to member linear_y
 * @return Reference to member linear_y
 */
double& TwistMsg::linear_y()
{
    return m_linear_y;
}

/*!
 * @brief This function sets a value in member linear_z
 * @param _linear_z New value for member linear_z
 */
void TwistMsg::linear_z(
        double _linear_z)
{
    m_linear_z = _linear_z;
}

/*!
 * @brief This function returns the value of member linear_z
 * @return Value of member linear_z
 */
double TwistMsg::linear_z() const
{
    return m_linear_z;
}

/*!
 * @brief This function returns a reference to member linear_z
 * @return Reference to member linear_z
 */
double& TwistMsg::linear_z()
{
    return m_linear_z;
}

/*!
 * @brief This function sets a value in member angular_x
 * @param _angular_x New value for member angular_x
 */
void TwistMsg::angular_x(
        double _angular_x)
{
    m_angular_x = _angular_x;
}

/*!
 * @brief This function returns the value of member angular_x
 * @return Value of member angular_x
 */
double TwistMsg::angular_x() const
{
    return m_angular_x;
}

/*!
 * @brief This function returns a reference to member angular_x
 * @return Reference to member angular_x
 */
double& TwistMsg::angular_x()
{
    return m_angular_x;
}

/*!
 * @brief This function sets a value in member angular_y
 * @param _angular_y New value for member angular_y
 */
void TwistMsg::angular_y(
        double _angular_y)
{
    m_angular_y = _angular_y;
}

/*!
 * @brief This function returns the value of member angular_y
 * @return Value of member angular_y
 */
double TwistMsg::angular_y() const
{
    return m_angular_y;
}

/*!
 * @brief This function returns a reference to member angular_y
 * @return Reference to member angular_y
 */
double& TwistMsg::angular_y()
{
    return m_angular_y;
}

/*!
 * @brief This function sets a value in member angular_z
 * @param _angular_z New value for member angular_z
 */
void TwistMsg::angular_z(
        double _angular_z)
{
    m_angular_z = _angular_z;
}

/*!
 * @brief This function returns the value of member angular_z
 * @return Value of member angular_z
 */
double TwistMsg::angular_z() const
{
    return m_angular_z;
}

/*!
 * @brief This function returns a reference to member angular_z
 * @return Reference to member angular_z
 */
double& TwistMsg::angular_z()
{
    return m_angular_z;
}


size_t TwistMsg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;









    return current_align;
}

bool TwistMsg::isKeyDefined()
{
    return false;
}

void TwistMsg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
          
}
